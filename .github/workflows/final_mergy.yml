# main 브랜치와 mergy할 경우 test -> docker image로 build -> aws에 배포

name: nest pull_request submitted

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ghcr.io/challengebackgroup21/moviewiki
  VERSION: ${{ github.sha }}
  NAME: moviewiki

jobs:
  # 각 job들은 각기 다른 runner(container)에서 동작한다.
  # test:

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Setup node.js 18.x
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
  #   - run: npm ci
  #   - run: npm run build --if-present
  #   - run: npm test
  
  # docker image로 build하고 github container registry에 push
  build:
    # needs: test
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache docker layers
        uses: actions/cache@v3 # 이전 실행에서 사용된 캐시를 사용한다.
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: challengebackgroup21
          password: ${{ secrets.MOVIEWIKI_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, label-mw ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: challengebackgroup21
          password: ${{ secrets.MOVIEWIKI_TOKEN }}
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 8080:3000 --name ${{ env.NAME }} -v /home/ubuntu/config:/app/config --restart always ${{ env.DOCKER_IMAGE }}:latest